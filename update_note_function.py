import datetime as dt


# –ù–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    notes = []
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é
    menu = {
        '1': 'üìù –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏',
        '2': '‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏',
        '3': 'üî∞ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É',
        '4': '‚≠ï –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã'
    }
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    options = {
        '1': '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É',
        '2': 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É',
        '3': 'üí† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é'
    }
    # –û—Å–Ω–æ–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
    while True:
        # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é
        print(f'\n{"="*50}\n–ú–µ–Ω—é:')
        dict_output(menu)
        print(f'{"="*50}')
        
        choice = menu.get(input('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ >> '))

        if choice == '‚≠ï –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã':
            break
        elif choice == 'üî∞ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
            notes = build_note(notes)
            output(notes)
        elif choice == '‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏':
            # –¶–∏–∫–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
            while True:
                # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é
                print(f'\n{"="*50}\n–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫:')
                dict_output(options)
                print(f'{"="*50}')

                choice = options.get(input('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ >> '))

                if choice == 'üí† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é':
                    break
                elif choice == '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
                    if len(notes) == 0:
                        print('\n‚ùå –ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.')
                    else:
                        delete_note(notes)
                        output(notes)
                elif choice == 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É':
                    if len(notes) == 0:
                        print('\n‚ùå –ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.')
                    else:
                        update_note(notes)
                else:
                    print('\n‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')

        elif choice == 'üìù –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏':
            if len(notes) == 0:
                print('\n‚ùå –ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.')
            else:
                output(notes)
        else:
            print('\n‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ª–æ–≤–∞—Ä—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
def dict_output(dict_):
    for key, value in dict_.items():
        if type(value) != list:
            print(f'{key}: {value}')
        else:
            print(f'{key}: {", ".join(value)}')


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
def update_note(notes):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    options = {
    '1': 'üë§ –°–º–µ–Ω–∏—Ç—å –∏–º—è',
    '2': 'üìå –°–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏',
    '3': 'üìù –°–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
    '4': 'üóìÔ∏è  –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è',
    '5': '‚è∞ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞',
    '6': 'üîî –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
    '7': 'üí† –ù–∞–∑–∞–¥'
    }
    while True:
        note_number = int(input(f'\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ (1-{len(notes)})'))

        if note_number > 0 and note_number <= len(notes):
            # –¶–∏–∫–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
            while True:
                # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
                print(f'\n{"="*50}\n–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ #{note_number}:')
                dict_output(options)
                print(f'{"="*50}')

                choice = options.get(input('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ >> '))

                if choice == 'üí† –ù–∞–∑–∞–¥':
                    return
                elif choice == 'üë§ –°–º–µ–Ω–∏—Ç—å –∏–º—è':
                    notes[note_number-1]['üë§ –í–∞—à–µ –∏–º—è'] = user_init()
                    print('\n‚úÖ –ò–º—è –∑–∞–º–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ.\n')
                    output(notes)
                elif choice == 'üìå –°–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏':
                    notes[note_number-1]['üìå –ó–∞–≥–æ–ª–æ–≤–∫–∏'] = title_init()
                    print('\n‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.\n')
                    output(notes)
                elif choice == 'üìù –°–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
                    notes[note_number-1]['üìù –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏'] = content_init()
                    print('\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ.\n')
                    output(notes)
                elif choice == 'üóìÔ∏è  –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è':
                    notes[note_number-1]['üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = create_date_init().strftime("%d-%m")
                    print('\n‚úÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞.\n')
                    output(notes)
                elif choice == '‚è∞ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞':
                    date = issue_date_init()
                    notes[note_number-1]['‚è∞ –î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞'] = dt.datetime.strftime(date, "%d-%m")
                    print('\n‚úÖ –î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.\n')
                    notes[note_number-1]['‚åõ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞'] = deadline_init(date)
                    output(notes)
                elif choice == 'üîî –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å':
                    notes[note_number-1]['üîî –°—Ç–∞—Ç—É—Å'] = status_init()
                    print('\n‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω.\n')
                    output(notes)
                else:
                    print('\n‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n')
        else:
            print('\n‚ùå –¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç.\n')


# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –∑–∞–º–µ—Ç–∫–∏
def build_note(notes):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    func_notes = notes

    print(f'\n{"="*50}\n–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏...‚úèÔ∏è\n{"="*50}')
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    username = user_init()
    titles   = title_init()
    content  = content_init()
    dates    = [create_date_init(), issue_date_init()]
    status   = status_init()
    deadline = deadline_init(dates[1])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    note = {
        'üë§ –í–∞—à–µ –∏–º—è'           : username,
        'üìå –ó–∞–≥–æ–ª–æ–≤–∫–∏'          : titles,
        'üìù –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏'   : content,
        'üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'      : dates[0].strftime("%d-%m"),
        '‚è∞ –î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞'      : dates[1].strftime("%d-%m"),
        'üîî –°—Ç–∞—Ç—É—Å'             : status,
        '‚åõ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞'        : deadline
    }

    func_notes.append(note)

    return func_notes


# –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
user_init      = lambda: input("\nüë§ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è >> ")
content_init   = lambda: input("\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ >> ")


# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç—ã
normalize_date = lambda date: date.replace(".", "-").replace("/", "-")


# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
def create_date_init():
    try:
        create_date = normalize_date(input("\nüóìÔ∏è  –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ (–¥–¥-–º–º-–≥–≥–≥–≥) >>"))
        create_date = dt.datetime.strptime(create_date, "%d-%m-%Y")
    except ValueError:
        print('\n‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!')
        return create_date_init()
    
    return create_date


# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞
def issue_date_init():
    try:
        issue_date = normalize_date(input("\nüóìÔ∏è  –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–º–µ—Ç–∫–∏ (–¥–¥-–º–º-–≥–≥–≥–≥) >>"))
        issue_date  = dt.datetime.strptime(issue_date, "%d-%m-%Y")
    except ValueError:
        print('\n‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!')
        return issue_date_init()

    return issue_date


# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
def title_init():

    titles, count, title = [], 0, ' '
    print(f'\n{"="*50}\nüìå –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–º–µ—Ç–∫–∏, [Enter] - —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n{"="*50}')

    while True:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = str(input(f'üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫ #{count+1} >> '))
        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø—É—Å—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        if title != '':
            if title.lower() not in list(map(str.lower, titles)):
                titles.append(title)
                count += 1
            else:
                print('\n‚ùå –¢–∞–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ –µ—Å—Ç—å!')
        else:
            break

    return titles


# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
def status_init():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤
    statuses = {
        '1': '‚úîÔ∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
        '2': 'üü° –û—Ç–ª–æ–∂–µ–Ω–æ',
        '3': '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
    }
    while True:
        print(f'\n{"="*50}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:')
        dict_output(statuses)
        print(f'{"="*50}')
        
        status = input("\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ >> ")
        
        if status in statuses:
            return statuses.get(status)
        else:
            print ('\n‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')


# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
def deadline_init(deadline_date):
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
    deadline = deadline_date - dt.datetime.now()

    if deadline.days == 0:
        return 'üîî –î–µ–¥–ª–∞–π–Ω —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!'
    elif deadline.days < 0:
        return '‚ùó –î–µ–¥–ª–∞–π–Ω —É–∂–µ –ø—Ä–æ—à—ë–ª!'
    else:
        return 'üîî –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ' + str(deadline.days) + ' –¥–Ω–µ–π!'
     

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
def output(notes):
    func_notes = notes
    for i, note in enumerate(func_notes, 1):
        print(f'\n{"="*50}\nüìù –ó–∞–º–µ—Ç–∫–∞ #{i}:\n{"="*50}')
        dict_output(note)


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
def delete_note(notes):
    func_notes = notes
    while True:
        note_number = int(input(f'\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ (1-{len(func_notes)})>> '))
        if note_number > 0 and note_number <= len(func_notes):
            func_notes.pop(note_number-1)
            print('\n‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.\n')
            output(func_notes)
            break
        else:
            print('\n‚ùå –¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç.\n')


# –°—Ç–∞—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã [Ctrl+C] –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤–∞—Ä–∏–π–Ω–æ.')